<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kuroigamen on FJORD,LLC</title>
    <link>http://fjord.jp/tags/kuroigamen/</link>
    <description>Recent content in Kuroigamen on FJORD,LLC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>FJORD,LLC</copyright>
    <lastBuildDate>Tue, 21 Dec 2010 15:28:25 +0000</lastBuildDate>
    
        <atom:link href="http://fjord.jp/tags/kuroigamen/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.09</title>
      <link>http://fjord.jp/articles/679.html</link>
      <pubDate>Tue, 21 Dec 2010 15:28:25 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/679.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズも最終回です。今回はそもそも&amp;#8221;黒い画面&amp;#8221;とは何なのかを紹介します。
&amp;#8220;黒い画面&amp;#8221;とは何か &amp;#8220;黒い画面&amp;#8221;とは何か。そりゃあもちろん今まで使ってきたコレ。
 ターミナル.appのことでしょう。
しかし、実は今まで&amp;#8221;黒い画面&amp;#8221;として使ってきた物は大きく二つのソフトから成り立っています。これは歴史的経緯を説明した方が分り易いと思います。
Terminal(ターミナル) Part.01で説明したように昔は大きな&amp;#8221;ホストコンピューター&amp;#8221;に多数の&amp;#8221;端末&amp;#8221;を接続して使っていました。
 &amp;#8220;端末&amp;#8221;にはディスプレイとキーボードが付いています。&amp;#8221;端末&amp;#8221;のキーボードで文字を打つと、ホストコンピューターに送られ、結果が帰ってきて&amp;#8221;端末&amp;#8221;のディスプレイに表示されます。
昔のコンピューターは非常に高価だったため、1台の大型コンピューターが処理を行い、単なる入出力装置としての安価な&amp;#8221;端末&amp;#8221;を複数用意して使いました。
この&amp;#8221;端末&amp;#8221;、英語ではTerminal(ターミナル)というハードウェアをソフトウェアで模倣(emulate)したものがターミナル.appです。この種類のソフトを正確にはターミナルエミュレーター(Terminal Emulator)と言います。
昔は&amp;#8221;ホストコンピューター&amp;#8221;と&amp;#8221;端末&amp;#8221;だったものが、今は端末はソフトウェアになり、ホストと端末が1台のパソコン上で完結しています。(端末で自分自身に接続している)
ターミナルは文字を入力することと結果を表示することしかできません。では今まで使ってきた$マークのアレは何だったのでしょう。
Shell(シェル)  $マークを出しているのはshell(シェル)という種類のソフトです。shellは$マークなどのプロンプトを表示してユーザーからの入力を待ち、入力されたファイル名のプログラムを実行し、終了したらまたプロンプトを表示して待ちます。
&amp;#8220;黒い画面&amp;#8221;の本質であると説明した、&amp;#8221;ファイル名を入力するとそれを実行する&amp;#8221;という機能はこのshellが行っています。
shellは殻という意味です。複雑なコンピューターを貝殻のようにつつみ、ユーザーとの仲介役をしてくれるためshellという名前なのだと思います。Finderも全く違う物に見えますが、コンピューターを包みこんでユーザーとの仲介役をしてくれるという意味では同じです。FinderのようなGUI(グラフィカルユーザーインターフェース)を持つものは特にグラフィカルシェルと呼びます。
このshellも単なるプログラムに過ぎません。/bin/shというのがそれです。shellを略してshとはやはり略し過ぎですね。
前回スクリプトを実行させる時に使ったshコマンドはこれです。普段は$の後に文字を打ち込んでいましたが、ファイルにまとめてshに渡せば同じ結果になるのは当たり前ですね。
代替ソフト &amp;#8220;黒い画面&amp;#8221;は主にTerminal Emulatorとshellの二つで成り立っていると説明しました。両方とも代替ソフトが存在します。
Terminal EmulatorはMacではiTermというソフトが有名です。初期のターミナル.appは貧弱だったのでiTermが良く使われていましたが、現在ではターミナル.appも十分な機能を持つため、殆どのユーザーはデフォルトのターミナル.appを使っていると思います。
shは実はMacのデフォルトのshellではありません。Macで実際に使われているのはshの強化版とも言うべきbashというshellです。
 bashの由来   元々shの正式名称はBourne Shellと言います。アメリカのAT&amp;Tベル研究所のSteve Bourneさんが作ったshellなのでBourne Shellです。bashはBourne-Again Shellの略でBourne Shellの全ての機能をカバーしつついくつもの追加機能を付けたshellです。Bourne ShellのBourneとborn again(生まれ変わり)を引っ掛けた駄洒落です。  他にも/binディレクトリにはスクリプトを書くのに強いcsh、cshを機能強化したtcsh、最後のshellを目指して作られたzshなど様々なshellがあります。chsh(CHenge SHellの略)コマンドでデフォルトで使われるshellを変更することができます。
最後に Webデザイナーの為の「本当は怖くない」”黒い画面”入門はこれで終わりです。どうでしょうか、&amp;#8221;黒い画面&amp;#8221;は怖くなくなったでしょうか？
このシリーズでお伝えしたかったのは、全体としては呪文か暗号のように見えるものでも、一つ一つの要素をとってみれば、&amp;#8221;日本語に訳してみればそのまんま&amp;#8221;だったり、&amp;#8221;省略しすぎてるだけ&amp;#8221;だったり、&amp;#8221;それを作ったおっさんの名前&amp;#8221;だったり、&amp;#8221;昔の名残で&amp;#8221;だったり、単純なことに過ぎないということです。
日本語ではDesigner(デザイナー)というとヴィジュアル面だけを担当する人という意味で使われがちですが、本来は設計者という意味合いの強い言葉です。ヴィジュアル面だけをやるならArtist(アーティスト)やIllustrator(イラストレーター)と呼ぶべきでしょう。
建築や家具などの工業製品のデザイナーにはエンジニアリングの基礎知識は必須です。Webデザイナーとは本来ヴィジュアル・システムを含めたWebの設計者であるべきです。
コンシューマー系Webサイトの大半を占める&amp;#8221;黒い画面&amp;#8221;すなわちUNIX系OSのエッセンスに触れることはWebのエンジニアリングを理解する上での一番の近道です。
これらのエントリーがそういった本当の意味でのWebデザイナーへの足掛かりになれば幸いです。</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.08</title>
      <link>http://fjord.jp/articles/655.html</link>
      <pubDate>Mon, 20 Dec 2010 16:55:34 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/655.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
作業の自動化 &amp;#8220;黒い画面&amp;#8221;での作業は文字を打ち込むだけの単純で厳密な手順なので簡単に自動化できます。
例えば、僕はlokkaというソフトを作っていますが、新しいバージョンをリリースする時に、その時の最新のファイルをダウンロードしてきてzipファイルに固める必要があります。下記のようなコマンドでそれが可能です。
$ git clone git://github.com/komagata/lokka.git lokka $ zip -r lokka.zip lokka $ rm -r lokka  gitというコマンドで最新のファイルをlokkaというディレクトリ名でダウンロードしてきて、zipコマンドでzipに圧縮し、元のディレクトリはもう要らないのでrmコマンドで削除しています。
実はこれをそのままファイルに書くだけで自動化が可能です。make-lokka-zipfileという分り易いファイル名に上記コマンドを書きました。catコマンドで確認するとこんな感じです。
$ cat make-lokka-zipfile git clone git://github.com/komagata/lokka.git lokka zip -r lokka.zip lokka rm -r lokka  そのままです。&amp;#8221;黒い画面&amp;#8221;に打ち込んでいた文字をファイルに書いただけですね。そのファイルを実行するには下記のようにshコマンドに渡します。
$ sh make-lokka-zipfile  ファイルの中に書いたコマンドを順番に実行してくれます。このようにやって欲しいコマンドを順番に書いたファイルをscript(スクリプト)と言います。scriptは演劇などの台本という意味なのでそのままですね。台本通りに&amp;#8221;黒い画面&amp;#8221;が動いてくれるわけです。phpプログラムの事をphpスクリプトと言ったりすることがありますが、program(プログラム)も予定表・計画表という意味なので殆ど同じ意味です。
ただ一点、shという謎のプログラムにファイルを渡して実行するという書き方がどうも野暮ったいです。lsみたいに自分の書いたスクリプトもコマンドっぽく実行したいところです。
謎のおまじない&amp;#8221;シバン&amp;#8221; &amp;#8220;黒い画面&amp;#8221;にはスクリプトを単体で実行するためにshebang(シバン)という機能があります。
#!/bin/sh echo hello  上記をecho-helloというファイル名で保存して実行してみてください。
$ chmod u+x echo-hello $ /Users/komagata/echo-hello hello  chmodはChenge MODeの略でファイルの権限を変更するコマンドです。echo-helloというファイルにユーザー実行権限(u+x)を追加しています。
shebangとは1行目の最初の2文字
#!  の事です。sharp bangが短くなってshebangとなったそうです。また、アメリカの俗語、the whole shebang(何もかも、一切合切)というのと掛けてるという説もあるそうです。シャープはわかります!が「バン！」って感じなのは日本人にはわかり辛いですね。でも#!の事を日本人は「シャープびっくり」と言ったりするので似たようなもんだと思います。
shebangは何なのかというと、
「&amp;#8221;黒い画面&amp;#8221;で実行しようとしたファイルの1行目の最初の二文字が#!だったら、その後に書いてあるコマンドに2行目以降の全てを渡す」</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.07</title>
      <link>http://fjord.jp/articles/649.html</link>
      <pubDate>Mon, 20 Dec 2010 16:01:44 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/649.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
前回で&amp;#8221;黒い画面&amp;#8221;用のフリーソフトが使えるようになったので次は&amp;#8221;簡単な自動化&amp;#8221;が出来るようにファイル操作の基本を覚えてしまいましょう。
ファイルの作成 $ touch foo  touchコマンドは空のファイルを作成します。本来既にあるファイルに触って(touchして)最終更新日を更新するだけのコマンドですが、空ファイルを作るのにも使われます。
ディレクトリの作成 $ mkdir bar  mkdirはMaKe DIRectoryの略でディレクトリを作成します。-pオプションで深い階層を持つディレクトリも一気に作れるのが便利です。
$ mkdir -p foo/bar/buz   ファイルのコピー $ cp foo /tmp  cpはCoPyの略で、そのまんまですがファイルをコピーするコマンドです。上記ではfooファイルを/tmpディレクトリにコピーしています。
$ cp foo bar  ファイル名を指定すればその名前でコピーされます。fooの複製barが出来ました。
$ cp -r foo /tmp  -rオプションを付ければディレクトリを丸ごとコピーできます。
 -rを付けないと&amp;#8221;fooはディレクトリだからコピーできないよ&amp;#8221;とエラーが出ています。親切ですね。
ファイルの移動 $ mv foo bar  mvはMoVeの略でそのまんまですが、ファイルを移動するコマンドです。cpと違って元のファイルは無くなってしまうので注意です。また、cpと違ってオプションを付けなくてもディレクトリの移動が可能です。
ファイルの削除 $ rm foo  rmはReMoveの略でファイルを削除するコマンドです。略し過ぎですね。
$ mkdir -p foo/bar/buz $ rm -r foo  -rオプションを付けるとディレクトリを丸ごと削除してくれます。危ないですね。sudoと組み合わせればどんな物も削除出来てしまうので注意してください。下記は絶対に実行してはいけません。
$ sudo rm -rf / # 絶対に実行してはいけない  ファイルの表示 $ cat /etc/hosts ## # Host Database # # localhost is used to configure the loopback interface # when the system is booting.</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.06</title>
      <link>http://fjord.jp/articles/622.html</link>
      <pubDate>Sun, 19 Dec 2010 13:01:54 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/622.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
 今回はHomebrewを導入してフリーソフトを簡単にインストールできるようにしましょう。
Package Manager(パッケージマネージャー)の必要性 &amp;#8220;黒い画面&amp;#8221;では以前紹介したlsやcurlなど、単機能のコマンドを組み合わせることで複雑な処理を実現します。一つのソフトが複数のソフトを利用するため、&amp;#8221;ソフトAをアップデートしたらソフトB、ソフトCが動かなくなった&amp;#8221;という状況が発生します。&amp;#8221;ソフトB 5.0にはソフトA 2.0以上が必要&amp;#8221;といった関係があるためです。これをソフトの依存関係と言います。
無数のソフトの依存関係を手動で管理するのは面倒過ぎるのでPackage Manager(パッケージマネージャー)と呼ばれる種類のソフトがよく使われます。Package Managerは&amp;#8221;そのソフトにどのソフトのバージョン何以上が必要か&amp;#8221;、&amp;#8221;今インストールされているソフトは何か&amp;#8221;といった情報を持っているため、必要に応じてソフトを勝手にダウンロードしてきてインストールしてくれます。便利過ぎますね。今回は最近Macで人気のあるPackage ManagerのHomebrewを使ってみます。(&amp;#8220;黒い画面&amp;#8221;のテーマ名&amp;#8221;Homebrew&amp;#8221;とたまたま同名ですね。)
Xcodeのインストール HomebrewにはMacのDVDについてくるXcodeというソフトが必要です。Xcode自体は必要無いんですが、これを入れると&amp;#8221;黒い画面&amp;#8221;用ソフトが沢山インストールされます。それらがHomebrewの動作に必要なのです。また&amp;#8221;黒い画面&amp;#8221;を使っていく上であると便利なソフトが沢山あるのでMacをインストールしたら問答無用でインストールしましょう。OS付属のDVDにも入っていますが、最新版が下記からインストールできます。無料のApple Developer登録が必要なので適当に登録してください。
Mac Dev Center &amp;#8211; Apple Developer
 何故かiOS SDKというのも付いてきます。要らないですが仕方ないですね。iOSはiPhoneやiPadのOSです。SDKはSoftware Development Kitの略で開発キットの意味ですね。
Homebrewのインストール Homebrewのインストール方法は斬新です。
$ sudo chown -R `whoami` /usr/local  まずは/usr/localディレクトリの所有者を自分のユーザーに変更します。
 所有者って？   全てのファイル・ディレクトリにはOwner(所有者)とGroup(グループ)があります。どのユーザーは書きこむことが出来る、どのグループは読み込むことができるといった権限の設定が細かくできます。この辺の事を詳しく説明すると&amp;#8221;怖くなる&amp;#8221;ので本シリーズでは説明しませんよ。  sudoは引数に渡したコマンドを管理者権限で実行するコマンドです。suはSuper Userの略で管理者の事です。Super Userで実行するからsudoです。sudoは起動に必要なファイルを消すとか致命的なコマンドでも実行できてしまうので注意して扱いましょう。
chownはCHange OwNerの略でファイルやディレクトリの所有者を変更するコマンドです。所有者のユーザー名と変更したいファイル・ディレクトリ名を指定します。-Rは指定したディレクトリより下全部を変更するというオプションです。
whoamiは自分のユーザー名を表示するコマンドです。Who am I?(私は誰？)なのでそのままですね。
`(バッククォート)は&amp;#8221;黒い画面&amp;#8221;に備わってる特殊な機能です。バッククォートで文字を囲うとその文字をコマンドとして実行して、出力結果に置き換えます。
$ ls `pwd`  つまり上記を実行すると、 バッククォートで囲われたpwdコマンドが実行され、その出力結果である/Users/komagataに置き換わるので最終的には
$ ls /Users/komagata  と入力したのと同じことになります。
最初のコマンドをもう一度見直してみましょう。
$ sudo chown -R `whoami` /usr/local  僕の環境で言えば、&amp;#8221;/usr/local以下全てのディレクトリの所有者をkomagataに変更する&amp;#8221;という動作になります。</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.05</title>
      <link>http://fjord.jp/articles/617.html</link>
      <pubDate>Sun, 19 Dec 2010 10:36:06 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/617.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
今回は&amp;#8221;黒い画面&amp;#8221;で使える便利コマンドを紹介していきます。
ネットから簡単ダウンロード&amp;#8221;cURL&amp;#8221; ネットからファイルを簡単にダウンロードできるcurl(シーユーアールエル)というコマンドがあります。&amp;#8221;Client for URLs&amp;#8221;の略だそうです。
$ curl http://example.com &amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot;&amp;gt; &amp;lt;HTML&amp;gt; &amp;lt;HEAD&amp;gt; &amp;lt;META http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt; &amp;lt;TITLE&amp;gt;Example Web Page&amp;lt;/TITLE&amp;gt; &amp;lt;/HEAD&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;You have reached this web page by typing &amp;quot;example.com&amp;quot;, &amp;quot;example.net&amp;quot;,&amp;quot;example.org&amp;amp;quot or &amp;quot;example.edu&amp;quot; into your web browser.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;These domain names are reserved for use in documentation and are not available for registration. See &amp;lt;a href=&amp;quot;http://www.rfc-editor.org/rfc/rfc2606.txt&amp;quot;&amp;gt;RFC 2606&amp;lt;/a&amp;gt;, Section 3.&amp;lt;/p&amp;gt; &amp;lt;/BODY&amp;gt; &amp;lt;/HTML&amp;gt;  curlは引数にURLを指定するとネットから取ってきて表示してくれます。ブラウザからhttp://example.comにアクセスしてソースを表示したときと同じものが表示されているはずです。
$ curl http://example.</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.04</title>
      <link>http://fjord.jp/articles/601.html</link>
      <pubDate>Tue, 14 Dec 2010 13:49:18 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/601.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
引数とオプションについて詳しく 今回は前回触りだけ説明した引数とオプションについてしっかり見ていきたいと思います。これが出来れば&amp;#8221;黒い画面&amp;#8221;用のフリーソフトを使う準備完了です。
引数はコマンドに渡す文字列です。コマンドの後にスペースを一個いれて文字を打ち込むんでした。
$ echo hello  実は引数は複数渡すことができます。スペースで区切って３つ引数を渡してみましょう
$ echo hello my friend hello my friend  はたから見ると単語を４つ書いているだけに見えますが、実際はechoコマンドに３つの引数を渡しているだけだということが分かると思います。
引数をどう処理してくれるのかはコマンドによって違います。echoは引数をスペースでつなげて表示します。(そういう風にechoの作者が作っただけ)
オプションとは lsは-aという引数を渡すとドットファイルも表示するんでした。lsはファイルやディレクトリのパスを渡すことでその一覧を見ることができます。
$ ls /bin  -aとパスの両方を渡すこともできます。
$ ls -a /bin  引数の中で特に-(ハイフン)から始まっているものをオプションといいます。引数やオプションにはこうあるべきというガイドラインはありますが、必ずそれに従わないといけないわけではありません。ガイドラインが出来る前の古いコマンドは従っていませんし、無視しているフリーダムなコマンドもあります。
オプションのガイドライン -(ハイフン)のあとアルファベット一文字がオプションです。オプションは複数指定できます。
$ command -a -b -c foo  オプションに文字を渡すことが出来るものがあります。(ファイルを指定する-fオプションがあった場合)
$ command -f /tmp/foo  アルファベット一文字だと覚えにくいので、&amp;#8211;(ハイフン二つ)から始まる同じ機能を持つオプションがある場合があります。ハイフン一つのものをショートネームオプション(short name option)、ハイフン二つのものをロングネームオプション(long name option)と呼びます。
$ command --name  ロングネームオプションに文字を渡すことが出来るものがあります。ロングネームオプションに文字を渡す場合=(イコール)を付けます。下記の2行は同じ動作をします。
$ command -f /tmp/foo $ command --file=/tmp/foo  ショートネームオプションとロングネームオプションは混在させることができます。
$ command -a --file=/tmp/foo bar  -hもしくは&amp;#8211;helpでそのコマンドの使い方が表示されます。Usageは利用法という意味です。</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.03</title>
      <link>http://fjord.jp/articles/589.html</link>
      <pubDate>Tue, 14 Dec 2010 03:47:10 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/589.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
前回、/bin以外にも$PATHを覗いてみたら色々とディレクトリが設定されてました。その中でも頻繁に使うコマンドが沢山入っている/usr/binを見てみましょう。
 cdというコマンドが見えます。これを使ってみましょう。
頻繁に使うコマンドcd 前回見たように$PATHに入ってるディレクトリはディレクトリ名を省略して実行できるんでしたね。また、コマンドには文字を渡して実行できることも学びました。
$ cd /bin  cdはChange Directoryの略で引数に与えたディレクトリに現在のワーキングディレクトリを変更するコマンドです。要はディレクトリを移動するコマンドです。Finderでフォルダをダブルクリックするのと同じと思って貰えればOKです。
何も表示されないので本当に移動できたのかわかりませんね。pwdで確認してみましょう。
$ pwd /bin   /binと表示されました。これまでは/Users/komagataだったのが/binに移動してます。ではここでlsしてみましょう
$ ls   沢山出ました。lsコマンドは何も文字を渡さない場合は現在いるディレクトリ(カレントワーキングディレクトリといいます)のファイル一覧を表示します。今は/binの中のファイル一覧が表示されているわけです。
 豆知識   cdが成功したのに何も表示されないのでアレ？と思ってしまいますね。&amp;#8221;黒い画面&amp;#8221;では成功した場合は何も表示せず、失敗した場合には色々表示するのが普通です。  &amp;#8220;黒い画面&amp;#8221;では沢山のコマンドを組み合わせて使うので、一つ一つのコマンドがいちいち成功するたびに何かを表示していたら画面が文字で埋まって本当に知りたい情報が分からなくなってしまいます。  コマンドを絶対にそう作らなければならないという訳ではわりませんが、「問題が無ければ黙っていろ」そういう文化があります。  パソコン内の探索 cdとlsさえあればパソコンの中にどんなファイルがあるのか見て回ることができます。/binや/usr/bin以外にも適当なディレクトリにcdしてlsしてみてください。cdやlsすることでパソコンが壊れることは無いので安心してください。
相対パス指定 &amp;#8220;黒い画面&amp;#8221;では&amp;#8221;今いる場所(カレントワーキングディレクトリ)からみて一つ上のディレクトリ&amp;#8221;や&amp;#8221;今いる場所からみてfoo/barというディレクトリ&amp;#8221;といった相対的な指定が出来ます。
..(ドット二つ)が一つ上のディレクトリ、.(ドット一つ)が今いるディレクトリ、foo/barは今いる場所から見てfoo/barというディレクトリ(先頭が/から始まるかどうかで決まります)という意味です。
これはhtmlやcssでも画像などを指定する時使うので分かると思います。../images/logo.pngとか書きますよね？
これは実際にフォルダとして見ることが出来ます。/binに移動して、lsに-aを引数として渡して実行してみてください。
$ cd /bin $ ls -a   lsに渡した-aという引数はオプションといって、コマンドにデフォルトとはちょっと違う動作をして欲しい時に渡します。
lsの-aは.(ドット)から始まる名前のファイルやディレクトリを表示するオプションです。つまり、デフォルトでは.hogeや.fugaというファイルを作っても見えないのです。.も..もドットから始まるファイルには違いないのでオプション無しでlsした場合は表示されません。
ホームディレクトリでls -aしてみてください。いつもFinderから見ていたフォルダに得体のしれないドットから始まる謎のファイルがいくつもあるはずです。これらドットから始まるファイルを&amp;#8221;隠しファイル&amp;#8221;または&amp;#8221;ドットファイル&amp;#8221;と言います。ホームディレクトリにあるコイツらは後々正体を小一時間ばかり問い詰めることにしましょう。
 一個上のディレクトリ(..)も単なるディレクトリであるということが分かりました。ということは二つ上のディレクトリに移動したい場合は下記のようにできるということです。
$ cd ../..  三つ上のディレクトリに移動したい場合はこうです。
$ cd ../../..  komagataのホームディレクトリからmachidaのホームディレクトリにあるDocumentsディレクトリに移動する場合はこうです。
$ cd ../machida/Documents  軽く頭が混乱してきますね。今自分がどこのディレクトリにいるかはpwdで確認できますが、常に自分の頭の中で意識しておく必要があります。</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.02</title>
      <link>http://fjord.jp/articles/563.html</link>
      <pubDate>Mon, 13 Dec 2010 04:32:14 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/563.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
今回も/binの中のプログラムを使ってみることから始めましょう。
三つ目のプログラムecho /binの中にechoというプログラムがあったので使ってみましょう。
$ /bin/echo hello  /bin/echoの後にスペースを一個入れて、その後に適当な文字を入力してみてください。その文字が画面に表示されます。
 &amp;#8220;黒い画面&amp;#8221;ではプログラムのファイル名を入力することでプログラムを実行しますが、その後ろにスペースを空けて文字を入れると、そのプログラムに文字を渡して実行することになります。この例ではhelloやheyという文字を/bin/echoに渡して実行していることになります。
このプログラムに渡す文字のことを引数(ひきすう)と言います。&amp;#8221;引用する数&amp;#8221;という意味でしょうか？英語ではargument(アーギュメント)といって、数学の用語だそうです。僕の記憶にはありませんが、高校とかで習ったかもしれません。
echo(エコー)は反響ややまびこという意味です。echoは引数として与えた文字をそのまま画面に表示するプログラムです。渡した文字を表示するだけのこんなプログラム何の役に立つんでしょう？
便利な仕組みPATHについて 前回、&amp;#8221;黒い画面&amp;#8221;ではファイル名を入力することでプログラムを実行すると言いました。/bin/lsとか/bin/pwdとか。しかし、これでは凄く深いディレクトリにあるプログラムを実行するのが面倒臭くて仕方がありません。
/Users/komagata/Documents/hoge/fuga/piyo/ls  こんな場所にlsがあったら面倒ですよね。試しに上記のようなディレクトリをFinderで作ってそこにlsをコピーしてみてください。問題無く実行できますが、入力するのがかなり面倒なはずです。
そこで&amp;#8221;黒い画面&amp;#8221;にはPATH(パス)という超便利な機能があります。PATHは&amp;#8221;黒い画面&amp;#8221;に設定されている項目の一つで、ここにディレクトリ名を設定しておくと、そこの中にあるプログラムはディレクトリ名を省略してファイル名だけで実行できるようになります。
例えば、/binというディレクトリは最初からPATHに設定されているので、今まで/bin/lsと入力してきましたが、実はlsだけでも実行できます。
 pwdもechoも同じです。お気を悪くなさらないでください。PATHは飽くまで便利機能であって、&amp;#8221;黒い画面&amp;#8221;は所詮はプログラムのファイル名を打ち込んでいるだけなんだということをお知らせしたかったのです。
PATHのお陰で見た目上コンピューターに正にCommand(指令)を送っているように見えますよね。「一覧(list)を表示しろ！」みたいに。
PATHには他にどんなディレクトリが設定されているんでしょう。これは先程のechoで見ることが出来ます。
$ echo $PATH  と打ってみてください。
 いくつかのディレクトリ名が&amp;#8221;:&amp;#8221;(コロン)で区切られて出てきたと思います。この:で区切られた一つ一つが全てPATHに設定されたディレクトリです。/binもちゃんとありますね。このディレクトリの中にあるプログラムはディレクトリ名を省略して打つことができます。
その前に$PATHの$ですがこれは何でしょう。echoは渡した引数を表示してくれるコマンドでした。だったら$PATHと表示されなければおかしいはずですよね。これは&amp;#8221;黒い画面&amp;#8221;に&amp;#8221;$から始まる文字はそういう名前の設定項目の中身を表示する&amp;#8221;という機能があるためです。echoも役に立ちましたね。
$PATHのように中身を変更できるものを変数(へんすう)と言います。英語ではvariableで変化するものという意味です。$PATH以外にもユーザー名が入ってる$USER、そのユーザーのホームディレクトリが入っている$HOMEなど、色々な変数が&amp;#8221;黒い画面&amp;#8221;では使われています。
  環境変数   &amp;#8220;黒い画面&amp;#8221;で最初から設定されている変数のことを&amp;#8221;環境変数&amp;#8221;(environment variable)と言います。これらの変数には各種コマンドの動作に影響を与えるものが沢山あります(PATHもそうでした)。コマンドの実行時に影響を与える周囲の環境といったニュアンスなので環境変数というのだと思います。env(environmentの略)コマンドで環境変数の一覧を見ることが出来ます。一行に一つ、変数名と中身が=(イコール)を挟んだ形で表示されます。PATHもちゃんとありますね。他のものも$PATHと同様に名前の先頭に$を付けてechoコマンドで中身を出力することができます。    &amp;#8220;黒い画面&amp;#8221;は自由に文字を打ち込んで良いように見えますが、結局はプログラムのファイル名を打ち込んでいるだけです。$PATHを見て、そこに書いてあるディレクトリにもその打ち込んだ文字と同じファイル名のプログラムがなければエラー。ただそれだけです。(ドアラというファイルはどのディレクトリにも無いようですね・・・)
まだPart.02ですが、&amp;#8221;黒い画面&amp;#8221;の基本的な考え方はこれに尽きます。後はこれの単なる応用だと考えてください。
それではPart.02はこの辺で失礼します。
まとめ  プログラムに文字を渡して実行することができる。 PATHに設定されてるディレクトリは省略できる。 何かの設定を入れておける変数というものがある。  次：Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.03</description>
    </item>
    
    <item>
      <title>Webデザイナーの為の「本当は怖くない」”黒い画面”入門 Part.01</title>
      <link>http://fjord.jp/articles/548.html</link>
      <pubDate>Sun, 12 Dec 2010 15:37:55 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/548.html</guid>
      <description>Webデザイナーの為の「本当は怖くない」”黒い画面”入門シリーズ一覧
komagataです。
Webデザイナーの皆さま。プログラマーがよく使ってる文字が一杯出てる黒い背景のソフト。あれって取っ付き辛くないですか？
 Web業界ではアレをデザイナー、プログラマー間で&amp;#8221;黒い画面&amp;#8221;って呼んでませんか？
デザイナー「ページのこの部分を変更したいんですが・・・大変ですかね？」
プログラマー「うーん。簡単なんですが、&amp;#8221;黒い画面&amp;#8221;で変更する必要があるんですよね。」
デザイナー「あぁ、じゃあ辞めておきます・・・。」
最近、デザイナーの@machidaさんが下記のようなことを言っていました。
「仕事が無いからFlashを勉強しようというWebデザイナーが多いけど、Flashが使えるWebデザイナーはもう沢山いる。&amp;#8221;黒い画面&amp;#8221;が使えた方がエンジニアからの仕事が増えるし、Webの仕組みが分かるので良いのになあ。」
それじゃあ、ということでWebデザイナーの為の「本当は怖くない」&amp;#8221;黒い画面&amp;#8221;入門を書いてみたいと思います。
このシリーズの目的は下記の３つです。
 Webデザイナーの方に&amp;#8221;黒い画面&amp;#8221;は怖くないことを知ってもらう。 &amp;#8220;黒い画面&amp;#8221;用のフリーソフトが使えるようになる。 簡単な&amp;#8221;作業の自動化&amp;#8221;ができるようになる。  とにかく使ってみる 取っ付き辛く見える&amp;#8221;黒い画面&amp;#8221;ですが、慣れの問題で使っているうちに単なるツールであることが分かると思います。とにかく使ってみましょう。
 Macではターミナル(別名&amp;#8221;黒い画面&amp;#8221;)が最初から入っています。&amp;#8221;アプリケーション&amp;#8221; &amp;gt; &amp;#8220;ユーティリティ&amp;#8221;の中にあるので立ち上げてみましょう。
 味も素っ気も無いウィンドウが開きました。ここに何か文字を打ち込むことでプログラムを実行します。
 ホスト名って何？   ホスト名(host name)はコンピューターの名前です。host(ホスト)は&amp;#8221;お客をもてなす人&amp;#8221;という意味があります。そこから、ネットワークを形成し、複数の端末からの要求を処理する大型コンピューターをホストコンピューターと昔は呼んでいました。今ではパソコンは全てそういった機能を持っているのでパソコン＝ホストと考えて問題ありません。   $(ドルマーク)これは何？   $までの部分をprompt(プロンプト)と言います。promptは&amp;#8221;促すもの&amp;#8221;という意味があります。「ここに入力してください！」と促す為のマークです。$自身を含めて自由にカスタマイズ出来るただの目印ですが、空にしてみるとものすごく分かり辛くなるのでpromptのありがたみがよくわかります。   「うわっ・・・私の黒い画面、白すぎ・・・？」
と思った方。慌てないでください。Macの&amp;#8221;黒い画面&amp;#8221;はデフォルトが何と白いのです。&amp;#8221;メニュー&amp;#8221;の&amp;#8221;環境設定&amp;#8221;から色やフォントの変更が出来ます。また、色々と最初からテーマが入っていますので好きなようにカスタマイズしてください。例えばHomebrewというテーマは黒背景に緑文字。マトリックスみたいで雰囲気が出ます。今後、このシリーズではHomebrewテーマでやっていきましょう。何事も形からです！(Homebrewは自家醸造酒、あるいは自家製のものという意味です。)
   何で黒背景に緑文字なのか   何故昔のパソコンやオシロスコープは緑文字なんでしょう。どうやら緑が目に良いと考えられていた為、白黒のところをブラウン管に緑の蛍光材を塗って緑色にしていたようです。(蛍光材にはグリーン、オレンジ、白があり、グリーンの方が先に開発されたので入手が容易だったという事情もあるみたいです。via @emutyworksさん)実際は色よりもコントラストが目に影響を与えるようです。また、現在主流の液晶ディスプレイでは基本発光しているところを液晶に電圧をかけて遮ることで色を出しているので白が一番省電力だそうです。   FinderなどのGUIアプリではプログラムのアイコンをダブルクリックすることで実行しますが、&amp;#8221;黒い画面&amp;#8221;ではプログラムのファイル名を入力することで実行します。
 では&amp;#8221;黒い画面&amp;#8221;でよく使うプログラムを見てみましょう。Finderで&amp;#8221;メニュー&amp;#8221;の&amp;#8221;移動&amp;#8221; &amp;gt; &amp;#8220;フォルダへ移動&amp;#8221; で &amp;#8220;/bin&amp;#8221; と打ってください。
 /binのフォルダが開いて中に色々入っているのがわかります。これらは全て黒い画面から使えるプログラムです。こんな分けわからないプログラムが自分のMacに入っていたなんて知ってました？普段私たちが見ているのは/Applicationsや/Users/komagata/Desktopや/Users/komagata/Documentsなんですよね。/binなんて場所の中がこんなグロいことになっていたとは・・・。
 コマンド？ディレクトリ？   プログラムを&amp;#8221;コマンド&amp;#8221;と言ったりしますが同じ意味です。またフォルダのことをディレクトリ(directory)と言う場合もあります。ディレクトリは名簿という意味です。（元々はディレクトリでしたが、Windows95からMicrosoftが取っ付き易いようにフォルダという名称を使い始めました。）  最初のプログラムls まずlsというプログラムを使ってみましょう。先程言ったように&amp;#8221;黒い画面&amp;#8221;ではプログラムのファイル名を打ち込むことで実行します。</description>
    </item>
    
  </channel>
</rss>
