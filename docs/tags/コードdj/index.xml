<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コードdj on FJORD,LLC</title>
    <link>http://fjord.jp/tags/%E3%82%B3%E3%83%BC%E3%83%89dj/</link>
    <description>Recent content in コードdj on FJORD,LLC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>FJORD,LLC</copyright>
    <lastBuildDate>Tue, 14 Sep 2010 08:09:19 +0000</lastBuildDate>
    
        <atom:link href="http://fjord.jp/tags/%E3%82%B3%E3%83%BC%E3%83%89dj/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>コードDJ第a回 – HTML5とそれ以外を判別する</title>
      <link>http://fjord.jp/articles/485.html</link>
      <pubDate>Tue, 14 Sep 2010 08:09:19 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/485.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第a回。
コレを作ってて2ヶ月近くポストして無かったですけどなにか？
 （＠佐々木健介）
komagata a.k.a. DJです。
今回紹介するのはコレ。
Ham CutletをHTML5に対応する &amp;#8211; Help me, hackers!
HTMLのインデントを綺麗にする誰得サービスHam Cutlet。内部で使ってるHamlがデフォルトxhtmlなのでhtml5を食わせるとコードが破壊される。それを解決してくれたナイスガイがmat_aki a.k.a. youroomの中の人。ありがとう！
mat_akiのパッチはこのコードに集約される。
app.rb at 236baf240828a805726a49adb8c76fd4f048f802 from mataki&amp;#8217;s hamcutlet &amp;#8211; GitHub
[cc lang=&amp;#8221;ruby&amp;#8221;] def html2haml(html)
html5 = (doctype = Hpricot(html).children.detect{ |e| e.doctype? }) ? doctype.public_id.nil? : false
haml = Haml::HTML.new(html.gsub(/t/, &amp;#8216; &amp;#8216;)).render
Haml::Engine.new(haml, :attr_wrapper =&amp;gt; &amp;#8216;&amp;#8221;&amp;#8216;, :format =&amp;gt; html5 ? :html5 : :xhtml ).render
end[/cc]
doctypeを見てHTML5なのか、それ以外なのかを判断してる。
[cc lang=&amp;#8221;html&amp;#8221;][/cc]
XHTML 1.0のdoctypeはこんな感じ。PUBLICなんとかがある。
[cc lang=&amp;#8221;html&amp;#8221;][/cc]</description>
    </item>
    
    <item>
      <title>コードDJ第9回 – Chrome Extensionに挑戦</title>
      <link>http://fjord.jp/articles/414.html</link>
      <pubDate>Tue, 27 Jul 2010 07:04:32 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/414.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第9回。
「あなだのコードがー　しぬほどスキダカダー！」（＠チャン・ドンゴン）
komagata a.k.a. DJです。
今回紹介するのはコレ。
Ham Cutlet Chrome Extension &amp;#8211; Help me, hackers!
HTMLのインデントを綺麗にする誰得サービスHam CutletのGoogle Chrome Extension。ブラウザの「このページのソースを見る」の代わりにインデントを綺麗にしたソースを表示するボタンをOmniBoxの右に追加するExtensionだ。
mongorian_chop a.k.a. 自由人が作ってくれた。ボタンのアイコンはmachida a.k.a. 漫★画太郎。軽いコラボ。
コードはココ。
mongorian-chop&amp;#8217;s hamcutlet-extension at master &amp;#8211; GitHub
manifest.json
[cc lang=&amp;#8221;javascript&amp;#8221;]{
&amp;#8220;name&amp;#8221;: &amp;#8220;Ham Cutlet Extension&amp;#8221;,
&amp;#8220;version&amp;#8221;: &amp;#8220;0.1&amp;#8221;,
&amp;#8220;description&amp;#8221;: &amp;#8220;Ham Cutletを使用したHTMLソース表示&amp;#8221;,
&amp;#8220;background_page&amp;#8221;: &amp;#8220;background.html&amp;#8221;,
&amp;#8220;browser_action&amp;#8221;: {
&amp;#8220;default_icon&amp;#8221;: &amp;#8220;icon.png&amp;#8221;,
&amp;#8220;defailt_title&amp;#8221;: &amp;#8220;Ham Cutlet&amp;#8221;
},
&amp;#8220;permissions&amp;#8221;: [
&amp;#8220;tabs&amp;#8221;
]
}[/cc]
background.html
[cc lang=&amp;#8221;html&amp;#8221;]


[/cc]
Chrome Extensionの作り方なんて知らないって？それならDJに任せろ！当然の如くDJも知らないからお前らの代わりに泣きながら覚えてやる！
モダンブラウザ・JS好きなら知らぬものはいないid:os0xの連載、続・先取り！ Google Chrome Extensions：第1回　Chrome ExtensionsのAPI#1｜gihyo.</description>
    </item>
    
    <item>
      <title>コードDJ 第8回 – AutoPagerize_DOMNodeInserted・・・だと・・・？</title>
      <link>http://fjord.jp/articles/406.html</link>
      <pubDate>Thu, 22 Jul 2010 14:54:26 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/406.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第8回。
「おでのからだはぼどぼどだー！」
komagata a.k.a. DJです。
今週はコレ。
WordPress.orgのプラグイン一覧でダウンロード数に目印をつけて欲しい &amp;#8211; Help me, hackers!
登録してくれたのはmonoooki a.k.a. 前田製作所。速攻解決してくれたのはazu_re a.k.a. Firefoxの人（DJ主観）。
ソースコード：
[cc lang=&amp;#8221;javascript&amp;#8221;]// ==UserScript==
// @name WordPress.org highlight counter
// @namespace http://efcl.info/
// @description WordPress.orgのタグ/単語検索のダウンロード数によって色を変える
// @include http://wordpress.org/extend/plugins/tags/*
// @include http://wordpress.org/extend/plugins/search*
// ==/UserScript==
/* TEST URL
http://wordpress.org/extend/plugins/search.php?q=word
http://wordpress.org/extend/plugins/tags/widget
*/
GM_addStyle(&amp;lt;&amp;gt; .GM_downloads_count_50000{ background: #cc0000; color: #fff; padding: 1px 3px; -moz-border-radius: 3px; } .GM_downloads_count_10000{ background:#ffb0b0; padding: 1px 3px; -moz-border-radius: 3px; } .GM_downloads_count_5000{ background:#ffd792; padding: 1px 3px; -moz-border-radius: 3px; } .</description>
    </item>
    
    <item>
      <title>コードDJ 第7回 – WordPressの擬似cron機構</title>
      <link>http://fjord.jp/articles/401.html</link>
      <pubDate>Tue, 13 Jul 2010 06:59:45 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/401.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第7回。
今、流行の２４シーズン１を見ているkomagata a.k.a. DJ（@流行に疎い方）です。
今回紹介するコードはコレ。
任意の期間、ブログが更新されないとメールが飛ぶwordpressのplugin &amp;#8211; Help me, hackers!
出題したのは@machida a.k.a. お米嫌い。議論に対していきなりコードで回答を示したのが@terakuma a.k.a. 法務系PHPer。
コード：
[cc lang=&amp;#8221;php&amp;#8221;]&amp;lt;?php /* Plugin Name: Remember The WordPress Plugin URI: http://github.com/e2esoundcom/Remember-The-WordPress Description: If you forgot write a new post,this plugin send you E-mail. Version: 0.2 Author: Yuya Terajima Author URI: http://www.e2esound.com/ */
/* When Activate Plugin ==================================================================== */ function rtw_activate() { $time = time(); $terms = 7; //default terms $unixtime_per_day = 86400; $email = get_bloginfo(&amp;lsquo;admin_email&amp;rsquo;); $subject = &amp;ldquo;Remember the WordPress!</description>
    </item>
    
    <item>
      <title>コードDJ 第6回 – はやい！もうついたのか！</title>
      <link>http://fjord.jp/articles/383.html</link>
      <pubDate>Tue, 06 Jul 2010 11:03:05 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/383.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第6回。
おい！ワールドカップ見てない癖に適当に話を合わせるのは辞めろ！DJ？モチロン見てたよ。本田のシュートは凄かったよね！・・・くらいやがれ！これが俺のワールドカップに対する知識の全てだ！
komagata a.k.a. DJです。
今回紹介するのはコレ。
無印良品のサイトの表示をデフォルトで「安い順、150件表示」にする &amp;#8211; Help me, hackers!
まさに「プログラマーにとって解きたくなるような問題」といったセンスの良い問題を投稿してくれたのは@monoooki a.k.a. 前田製作所。
そして解決してくれたのはお馴染み@milk1000cc a.k.a. 牛乳嫌いプログラマ on Rails。（@milk1000ccはDJのストーキング情報によれば最近PONPONというグルーポン情報まとめサイトをRails, Herokuで公開したらしいRails野郎だ。）
二人ともありがとう！
しかし、ちょっと待ってくれ。コイツをどう思う？（＠阿部高和）
% heroku console &amp;gt;&amp;gt; Task.find(106).created_at =&amp;gt; Tue, 06 Jul 2010 04:16:07 UTC +00:00 &amp;gt;&amp;gt; Task.find(106).comments.correct.first.created_at =&amp;gt; Tue, 06 Jul 2010 07:02:54 UTC +00:00  「すごく・・・早いです・・・。」（＠道下正樹）
タスクが登録されてからわずか3時間足らずで解決されている。（＠荒巻）
たしかにDJも「これは解きたくなる問題だな」とは思ってはいたが、あまりにもはやすぐるでしょう？
本題のタスクの内容は、
 こんな感じで無印良品ネットストアのデフォルトは「おすすめ順」「50件表示」になってる。それを「安い順」「150件表示」をデフォルトになるようにして欲しいというタスク。
あるある。確かにハードに使ってるサイトでこういうちょっとしたところを俺仕様にしたいことある。
それを通常ならありえない速さできょうきょ参戦（＠ブロントさん）してくれたグリモンコードがコレ。
http://gist.github.com/465095
（右上のrawのリンクをクリックでグリモンスクリプトインストール）
// ==UserScript== // @name AutoMujiSort // @namespace http://www.milk1000.cc/ // @include http://www.muji.net/store/cmdty/section/* // ==/UserScript== (function() { var OLD_PATTERN = { sort: 4, count: 12 }; var NEW_PATTERN = { sort: 0, count: 150 }; var $ = function(selector) { return document.</description>
    </item>
    
    <item>
      <title>コードDJ 第5回 – ウォーターマークが消えなければ消せばいいじゃない</title>
      <link>http://fjord.jp/articles/380.html</link>
      <pubDate>Tue, 29 Jun 2010 01:26:31 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/380.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第5回。
TimeMachineで自動バックアップを取っていても結局クリーンインストール後は手でデータを復旧させる昭和の男、komagata a.k.a. DJです。
今回はコレ、フォームのデフォルトの文字をフォーカスが移ったら消す &amp;#8211; Help me, hackers!
コレの経緯はこんな感じだ。
 F5V a.k.a. PHPerよりHam CutletにTwitter経由で上記の要望が入る。 DJが要望をHelp me, hacekrs!に登録する。 mongorian_chop a.k.a. 自由人からjQuery Watermark Pluginの情報を貰う。 USTREAMの開発生放送でDJが上記プラグインでの実装に敗北。 見るに見かねたmongorian_chopが実装してpull request。  １００万語の言葉より１つのpull request。コードは偉大だ。
「コード！コード！コード！」
「よし、ならばコードだ。」
今回のキモはココ。
views/index.haml at c7cf55da11f2131568deda5b1d4b7a46742943f8 from mongorian-chop&amp;#8217;s hamcutlet &amp;#8211; GitHub
$(document).ready(function(){ $.updnWatermark.attachAll(); $(&#39;.updnWatermark  label&#39;).click(function(){ $(this).toggle(); $(&#34;textarea&#34;).select(); }).blur(function(){ $(this).toggle(); }); }); $(document).ready(function(){ &amp;#8230; }) はお馴染み、DOMの構築が終わった瞬間に実行してくれるjQueryの書き方だ。$(function() { &amp;#8230; }) でも同じ。画像の読み込み等を待たない分、onloadより速いのでjQuerystはドンドン使ってこ！
今回、DJが挫折してたのはjQuery Watermark Pluginをtextareaに使った時に、そのWatermarkのテキスト自身をクリックした場合にWatermakが消えないところだ。
mongorian_chopはそこをちゃんと消すコードを書いてくれた。ありがとう！
jQueryだとちょっと面倒に思えた処理もこんなにスマートな見た目で書けるなんて。DJこの連載のおかげで強制的にJS勉強させられてるね！
DJ、今現在もHelp me, hacekers!上で複数のコード野郎共とコラボ中だ。議論する暇があったらコードを送りつけろ！</description>
    </item>
    
    <item>
      <title>コードDJ 第4回 – Sinatraメソッドは文字列を返せばいい</title>
      <link>http://fjord.jp/articles/365.html</link>
      <pubDate>Tue, 22 Jun 2010 19:02:34 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/365.html</guid>
      <description>Macのマイクから獣の吠え声の様なものしか聴こえないkomagata a.k.a. DJです。
毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第4回。
今回はコレ、HTMLのインデントを綺麗にするAPI &amp;#8211; Help me, hackers!
HTMLのインデントを綺麗にするサービスHam CutletにAPIを付けるというタスク。やってくれたのはkyanny a.k.a. 刺身ブーメラン。
コードはコレ。
source = NKF.nkf(&#39;-w&#39;, expand_tab( open(params[:url]){ |f| f.read } ) ) 38行目のココでurlで指定したページのソースを取ってきてタブをスペースに変換。NKFでutf-8に変換。-wはそういうオプションみたいだ。後はそれを表示すればいい。
erb :created, :layout = false 49行目でerbを使ってHTMLを表示している。sinatraではget &amp;#8216;/&amp;#8217; do; endなどのメソッドは文字列を返せばそれが表示されるというシンプル設計。他でも使ってるhamlメソッドなども文字列を返すメソッドだ。
なのでココは、
@html とやるだけでもいい。
このタスクのお陰でAPIが出来たので、誰得Chrome拡張などを作ってもらう事が出来た。
他のプログラマーにpushしたりpullしたりするのは何故か訳も無く楽しい。コードを介したコミュニケーションはプログラマーにしか出来ない。kyanny a.k.a. 刺身ブーメランとのコラボレーションも無性にテンション上った。コレは騙されたと思って試してみて欲しい。何かテンション上るんだ。
ちょっとDJ、Windowsプログラマーとか色んなプログラマーにpushしたりpullしたりしたくなって来た。</description>
    </item>
    
    <item>
      <title>コードDJ 第3回 – selectが無いならtextareaを食べればいいじゃない</title>
      <link>http://fjord.jp/articles/349.html</link>
      <pubDate>Tue, 15 Jun 2010 04:46:26 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/349.html</guid>
      <description>父の日前に「電子書籍リーダーに興味がある」ってiPad送れってことか？
汚い。流石親父汚い。
komagata a.k.a. DJです。
今週はコレ：COOK後にHTMLをクリップボードに保存したい &amp;#8211; Help me, hackers!
やってくれたのは@func09 a.k.a. ラペコの中の人だ。
Ham CutletはHTMLのインデントを綺麗にする誰得サービスだ。タグのネストが綺麗に揃うと尋常じゃない行数になることがあるので全選択してコピーするのが非常に面倒臭い。これを解決したいという依頼。（というかほとんどバグかってぐらい苦痛）
コレ、textareaだったら
elem.select() で完了なんだけど、コードはpre, codeタグで出したいというDJと@machida a.k.a. マークアップエンジニアのわがままで実装方法がわからず心が折れてた。
それをエレガントに解決してくれた@func09のコードがコレ。
[父の日前に「電子書籍リーダーに興味がある」ってiPad送れってことか？
汚い。流石親父汚い。
komagata a.k.a. DJです。
今週はコレ：COOK後にHTMLをクリップボードに保存したい &amp;#8211; Help me, hackers!
やってくれたのは@func09 a.k.a. ラペコの中の人だ。
Ham CutletはHTMLのインデントを綺麗にする誰得サービスだ。タグのネストが綺麗に揃うと尋常じゃない行数になることがあるので全選択してコピーするのが非常に面倒臭い。これを解決したいという依頼。（というかほとんどバグかってぐらい苦痛）
コレ、textareaだったら
elem.select() で完了なんだけど、コードはpre, codeタグで出したいというDJと@machida a.k.a. マークアップエンジニアのわがままで実装方法がわからず心が折れてた。
それをエレガントに解決してくれた@func09のコードがコレ。
]4
#created.section - if flash[:error] .error %h2 HTMLに下記の問題があります。 %p= flash[:error] .to_top %a{:href = &#39;/&#39;}トップページに戻る - else %h2 インデントの美しいHTMLが出来ました %button.raw plane text .source %textarea{:style = &#39;display:none;&#39;} =h @html %pre %code=h @html :javascript $(function(){ $(&#39;.</description>
    </item>
    
    <item>
      <title>コードDJ 第2回 – acts_as_taggable_on_steroidsプラグインのバグ修正</title>
      <link>http://fjord.jp/articles/317.html</link>
      <pubDate>Tue, 08 Jun 2010 15:58:40 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/317.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第2回。
「電子書籍通の俺から言わせてもらえば、電子書籍通の間での最新の流行、&amp;#8221;青空文庫形式&amp;#8221;。コレ。&amp;#8221;青空文庫形式&amp;#8221;は縦書きとルビを標準でサポート。しかしコレで保存しても海外ではまったく役に立たないという危険も伴う&amp;#8221;諸刃の剣&amp;#8221;。まあお前らド素人はAZWでも使ってなさいってこった。」
komagata a.k.a. DJです。
 【ニコニコ動画】ゴノレゴさんがア○プルに問い詰めたいことがあるようです  今回紹介するのはコレ。
acts_as_taggable_on_steroidsのタグのValidationのエラーを直したい &amp;#8211; Help me, hackers!
毎週火曜日更新とかいってコレ書いてる現在火曜日 23時50分ということからわかるようにDJネタに困ってたんだ。
そこに現れた天使がmilk1000cc a.k.a 牛乳嫌いプログラマ on Rails。
放置出来ないバグなのにうまい直し方がわからずDJが寝かせてたバグをサラっと解決してくれた上にネタまで提供してくれて最高だ。
神とアラン・ケイとmilk1000ccに感謝。
コードはココ：
 http://github.com/komagata/help-me-hackers/blob/master/vendor/plugins/acts_as_taggable_on_steroids/lib/acts_as_taggable.rb http://github.com/komagata/help-me-hackers/blob/master/vendor/plugins/acts_as_taggable_on_steroids/lib/tag.rb  元はRailsのタグ付けプラグインのacts_as_taggable_on_steroidsだが、Help me, hackers!向けにDJがちょっと修正を加えてある。
そもそも大元のacts_as_taggable自体、Rails初期からのプラグインで_reduxとか_steroidsとか色々派生を産んでるが品質も色々。ポリモーフィック関連が使えるようになってからは単純なacts_as_系は書いても実装は大分楽になったので若干重要性は薄れているが色々なところで使われている。
自分がURLの一部として使われるタグの実装をすることを想像してみて欲しい。DJが追加したかった部分は下記。
 case insensitive（大文字・小文字を区別しない） 小文字に統一 空白禁止（ハイフン使ってね）  まあ、stackoverflowの仕様のパクリなんだけどね。
class Tag &amp;lt; ActiveRecord::Base validates_presence_of :name validates_uniqueness_of :name, :case_sensitive = false # デフォルトはtrueなのでfalseにする validates_format_of :name, :with = /^S+$/ # Sは非空白文字 def before_validation self.name.downcase! # 小文字に合わせる end end 要はこんな感じにTagクラスを定義したいんだけど、Tagクラスはプラグインの中だから直接修正した。（app/models/tag.</description>
    </item>
    
    <item>
      <title>コードDJ 第1回</title>
      <link>http://fjord.jp/articles/280.html</link>
      <pubDate>Tue, 01 Jun 2010 05:02:31 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/280.html</guid>
      <description>毎週火曜日、Help me, hackers!に上がったコードを紹介していくコードDJ 第1回。
「果物だけを食べていれば風呂に入らなくていい」
ジョブスの言葉で一番感動したのはコレ。komagata a.k.a. DJです。
今週紹介するのはコレ。
ホームページビルダーで作られてるサイトを目立たせるGreasemonkeyスクリプト &amp;#8211; Help me, hackers!
 正直DJが登録したタスクなんだけどね。2回目にしてネタ切れ気味のDJを助けてくれ。
ホームページビルダーで出来てるサイトの修正だけは勘弁して欲しいので目立つようにしたかった。
このタスクを登録して数時間もしないうちに2人のECMAScripterが解決してくれた。DJ頭に来たから両方振り込んだよ。
速攻で解決してくれたのはazu_re a.k.a ニコ厨とおなじみm_satyr a.k.a. short-coder。
コード：Source for &amp;ldquo;IBM Builder Caution&amp;rdquo; Userscripts.org
概要としては、XPathを簡単に使うようにした$x関数の定義と、IBMロゴの生成だ。
var result = expr.evaluate(context, XPathResult.ANY_TYPE, null);  キモはやはり30行目のevaluate。このevaluate関数、なんでこんなに引数多いんだろうか。DJちょっと調べてみたよ。
 Introduction to using XPath in JavaScript &amp;#8211; MDC
パラメータ
evaluate 関数は 5 つのパラメータを取ります。
 xpathExpression 評価する XPath 式を文字列で指定します。 contextNode xpathExpression を評価する対象となる文書内のノードを指定します。指定されたノードの全ての子ノードに対しても評価が行われます。もっともよく指定される値は document です。 namespaceResolver xpathExpression に含まれるあらゆる名前空間接頭辞を渡され、その接頭辞に対応する名前空間 URI を表す文字列を返す関数です。この関数により、XPath 式で使われている接頭辞と文書内で使われている接頭辞が異なっていたとしてもそれを変換する事が可能になります。この関数は次のいずれかです。
 XPathEvaluator オブジェクトの createNSResolver メソッドにより作成されたもの。ほとんどの場合はこれを使うべきでしょう。 HTML 文書の場合や、名前空間接頭辞が使われていない場合は null 。xpathExpression に名前空間接頭辞が含まれている場合に null を使うと、NAMESPACE_ERR コードと共に DOMException が投げられるので注意してください。 ユーザ定義のカスタム関数。詳しくは付録のユーザ定義名前空間リゾルバの使用の節を参照して下さい。  resultType 評価の結果返してほしい値の型を示す定数です。もっとも良く指定される定数は XPathResult.</description>
    </item>
    
    <item>
      <title>コードDJ　第0回</title>
      <link>http://fjord.jp/articles/270.html</link>
      <pubDate>Tue, 25 May 2010 13:45:56 +0000</pubDate>
      
      <guid>http://fjord.jp/articles/270.html</guid>
      <description>とうとう始まってしまった。Help me, hackers!に上がったコードの中身を毎回紹介していくコードDJ。
「始まる、始まる」って電波を送信しといたから、宇宙の知識の全てが記録されているというアカシックレコードにアクセスしてた人は、本当にお待たせ。komagata a.k.a. DJです。
第0回といっても準備号的なものってわけじゃなく、ゼロオリジンなだけなので注意だ。
今回紹介するのはコレ。
はてなブックマークのコメントをGoogle Readerに表示するFirefox Add-onかGreasemonkey &amp;#8211; Help me, hackers!
Google ReaderとはてブはDJも愛用している。正直俺も欲しい。
machibuse a.k.a. ネオニートが投稿してくれた。ありがとう！
即効でGistにアップしてくれたのがm_satyr a.k.a. short-coder-wannabe。畜生、わかってるじゃねえか。
コード：
https://gist.github.com/406743/cebdd9dd0579311277ba044f0931ea5684361de1
（右上のrawのリンクからグリースモンキースクリプトをインストールできる。）
DJ正直、Javascriptとかグリモンとか詳しくないが行数はたった67行。BSDのlsより遥かに小さいコードだから頑張ってみていこう。
const HB = &#39;http://b.hatena.ne.jp/&#39;, HBE = HB + &#39;entry/&#39;;  いきなりconstか、おしゃれじゃねえか・・・。ついていけるのか心配だ。
概要はGM_addStyleでスタイルを定義してGM_xmlhttpRequestで取ってきたはてブをsetInterval内でそれぞれのエントリーにくっつけてる。
GM_xmlhttpRequestのクロスドメイン通信はChromeでは出来ないけど何か方法があるらしいからChromeユーザーは頑張ってくれ！
GM_addStyle(.hatebu-count {float:right} ${margin:0; padding:0; clear:both}  9行目に素でCDATAが置いてある。これはアレか、E4XのXMLリテラルか。
$は何？そういうCSSセレクターがあるの？
function qse(node, sel, fn) Array.forEach(node.querySelectorAll(sel), fn);  20行目には便利な関数が。querySelecterの略でqseか？素敵だ、パクろう。
setInterval(function watch(){ qse(document, &#39;.entry:not([data-grhc-done])&#39;, fetch); }, 1e3);  その前にsetIntervalの第二引数の1e3。これはよく見たら指数形式の整数。基数を10として扱うから 「1e3」は「1×103」のことで「1000」。確かに慣れるとわかりやすいが1文字少ない方を選ぶとはさすがshort-coder・・・。
setInterval第一引数の関数にwatchと名前がついてるのはどういう意味があるんだろうか？
その後はfetch関数の中になる。
for each(let {user, tags, comment, timestamp} in o.</description>
    </item>
    
  </channel>
</rss>
